basePath: /
definitions:
  model.Task:
    properties:
      activeAt:
        type: string
      id:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: This is a simple Todo List microservice.
  title: Todo List API
  version: "1.0"
paths:
  /api/todo-list/tasks:
    get:
      description: List tasks by status (active or done)
      parameters:
      - description: Task Status
        in: query
        name: status
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Task'
            type: array
      summary: List tasks by status
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a new task with the input payload
      parameters:
      - description: Create Task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/model.Task'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Task'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new task
      tags:
      - tasks
  /api/todo-list/tasks/{id}:
    delete:
      description: Delete a task by ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a task
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Update an existing task by ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/model.Task'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update an existing task
      tags:
      - tasks
  /api/todo-list/tasks/{id}/done:
    put:
      description: Mark a task as done by ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Mark a task as done
      tags:
      - tasks
  /healthz:
    get:
      consumes:
      - application/json
      description: get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Show the status of server.
      tags:
      - health
swagger: "2.0"
